//
// This file is released under the terms of the NASA Open Source Agreement (NOSA)
// version 1.3 as detailed in the LICENSE file which accompanies this software.
//
//////////////////////////////////////////////////////////////////////

#ifndef QUAT_H
#define QUAT_H

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "utils.H"

class QUAT {

private:

    double Vec_[4];

public:

    QUAT(void);
   ~QUAT(void);
    QUAT(const QUAT &quat);

    QUAT& operator=(const QUAT &quat);

    double& operator()(int i);

    const double& operator()(int i) const;

    friend QUAT operator+(const QUAT &quat1, const QUAT &quat2);
    friend QUAT operator-(const QUAT &quat1, const QUAT &quat2);
    friend QUAT operator*(const QUAT &quat1, const QUAT &quat2);

    void FormInverse(void);

    template <typename T>
    void FormRotationQuat(T *Vec, T Theta);
};

/*##############################################################################
#                                                                              #
#                         QUAT FormRotationQuat                                #
#                                                                              #
##############################################################################*/

template <typename T>
void QUAT::FormRotationQuat(T *Vec, T Theta)
{

    int i;
    T Dot, SinHalfTheta;
    QUAT Quat;

    // Create the pure part along the normalized vector

    Dot = sqrt(vector_dot(Vec,Vec));

    SinHalfTheta = sin(0.5*Theta);

    for ( i = 0 ; i <= 2 ; i++ ) {

        (*this)(i) = Vec[i] * SinHalfTheta / Dot;

    }

    (*this)(3) = cos(0.5*Theta);

}

#endif
